"use strict";

function addScrollToBottom() {
    function showButton() {
        currentScroll() <= threshold ? hidden && (button.className = "", hidden = !1) : hidden || (button.className = "hidden", hidden = !0);
    }

    function currentScroll() {
        return scrollContainer.scrollTop || document.documentElement.scrollTop || 0;
    }

    function scrollToPosition(position) {
        scrollContainer.scrollTop = position;
        document.documentElement.scrollTop = position;
    }

    function scrollToBottom() {
        var targetPosition = scrollContainer.scrollHeight - window.innerHeight;
        scrollToPosition(targetPosition);
    }

    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
        backgroundColor = options.backgroundColor || "#e2e2e2",  // Gray background similar to the back-to-top button
        cornerOffset = options.cornerOffset || 20,
        diameter = options.diameter || 40,
        ease = options.ease || function (t) { return .5 * (1 - Math.cos(Math.PI * t)); },
        id = options.id || "scroll-to-bottom",
        innerHTML = options.innerHTML || '<svg viewBox="0 0 24 24"><path d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6z"></path></svg>', // Down arrow SVG
        scrollContainer = options.scrollContainer || document.body,
        scrollDuration = options.scrollDuration || 100,
        showWhenScrollTopIs = options.showWhenScrollTopIs || 1,
        size = options.size || diameter,
        textColor = options.textColor || "#000",  // Arrow color similar to back-to-top button
        zIndex = options.zIndex || 1;

    var n = Math.round(.5 * size), // Adjusted for better centering
        i = Math.round(.25 * size), // Adjusted for better centering
        d = "#" + id + "{background:" + backgroundColor + ";-webkit-border-radius:50%;-moz-border-radius:50%;border-radius:50%;top:" + cornerOffset + "px;-webkit-box-shadow:0 2px 5px 0 rgba(0,0,0,.26);-moz-box-shadow:0 2px 5px 0 rgba(0,0,0,.26);box-shadow:0 2px 5px 0 rgba(0,0,0,.26);color:" + textColor + ";cursor:pointer;display:block;height:" + size + "px;opacity:1;outline:0;position:fixed;right:" + cornerOffset + "px;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;-webkit-transition:top .2s,opacity .2s;-o-transition:top .2s,opacity .2s;-moz-transition:top .2s,opacity .2s;transition:top .2s,opacity .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:" + size + "px;z-index:" + zIndex + "}#" + id + " svg{display:block;fill:currentColor;height:" + n + "px;margin:" + i + "px auto 0;width:" + n + "px}#" + id + ".hidden{top:-" + size + "px;opacity:0}";

    var r = document.createElement("style");
    r.appendChild(document.createTextNode(d));
    document.head.insertAdjacentElement("afterbegin", r);

    var button = function () {
        var o = document.createElement("div");
        return o.id = id, o.className = "hidden", o.innerHTML = innerHTML, o.addEventListener("click", function (o) {
            o.preventDefault();
            scrollToBottom();
        }), document.body.appendChild(o), o;
    }(),
        hidden = !0,
        threshold = showWhenScrollTopIs;

    function adjustButtonPosition() {
        var navbarHeight = document.querySelector('.navbar').offsetHeight || 0;
        button.style.top = (cornerOffset + navbarHeight) + "px";
    }

    adjustButtonPosition();  // Initial adjustment to ensure visibility

    window.addEventListener("resize", adjustButtonPosition);  // Adjust if window is resized
    (scrollContainer === document.body ? window : scrollContainer).addEventListener("scroll", showButton);
    showButton();
}

window.addEventListener("load", function () {
    var button = document.getElementById("scroll-to-bottom"),
        stickyTop = document.querySelector(".sticky-top"),
        fixedTop = document.querySelector(".fixed-top");

    button && window.addEventListener("scroll", function () {
        if (stickyTop) {
            var stickyTopRect = stickyTop.getBoundingClientRect();
            window.scrollY > stickyTopRect.height
                ? (button.style.position = "fixed", button.style.top = stickyTopRect.height + 15 + "px")
                : (button.style.position = "fixed", button.style.top = "15px");
        }

        if (fixedTop) {
            var fixedTopRect = fixedTop.getBoundingClientRect();
            button.style.position = "fixed";
            button.style.top = fixedTopRect.height + 15 + "px";
        }
    });
});
